/*
 * Copyright 2019. OPENTEST. All rights reserved.
 */

package io.opentest.domain.customer.entity;

import static org.assertj.core.api.Assertions.*;

import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.annotation.Rollback;

import javax.persistence.EntityManager;

@DataJpaTest(properties = {"spring.config.location=classpath:/application-domain.yml"})
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
public class CustomerTest {

    @Autowired
    private EntityManager em;

    private JPAQueryFactory queryFactory;

    @BeforeEach
    public void init() {
        queryFactory = new JPAQueryFactory(em);
    }

    @Test
    @Rollback(value = false)
    @DisplayName("고객 생성 성공테스트")
    public void shouldCreateCustomer() {

        // ⭐️ given
        BillingAddress billingAddress = BillingAddress.builder()
                .zipCode("18488")
                .build();

        Customer customer = Customer.builder()
                .name("양재원")
                .build();
        customer.addBillingAddress(billingAddress);

        // ⭐️ when
        em.persist(customer);

        BooleanBuilder builder = new BooleanBuilder();
        builder.and(QCustomer.customer.id.eq(customer.getId()));

        Customer savedCustomer = queryFactory.selectFrom(QCustomer.customer)
                .where(builder)
                .fetchOne();

        // ⭐️ then
        assertThat(savedCustomer).isNotNull();
        assertThat(savedCustomer).isEqualTo(customer);
        //assertThat(billingAddress.getCustomer()).isEqualTo(customer);
        assertThat(billingAddress).isEqualTo(customer.getBillingAddresses().get(0));
    }

    @Test
    @Disabled
    @DisplayName("고객 삭제 성공테스트")
    public void shouldDeleteCustomer() {

        // ⭐️ given
        Customer customer = em.find(Customer.class, 233L);
        customer.removeBillingAddress(customer.getBillingAddresses().get(0));
    }
}
