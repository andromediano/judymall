/*
 * Copyright 2019. OPENTEST. All rights reserved.
 */

package io.opentest.domain.customer.service;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;

import io.opentest.domain.customer.entity.BillingAddress;
import io.opentest.domain.customer.entity.Customer;
import io.opentest.domain.customer.repository.CustomerRepository;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.Optional;

@ExtendWith(MockitoExtension.class)
public class CustomerServiceTest {

    // 테스트 하고자 하는 객체
    @InjectMocks
    private CustomerService service;

    // 테스트 하고자 하는 객체에서 주입하고 있는 객체
    @Mock
    private CustomerRepository repository;

    @Test
    @DisplayName("고객을 저장 할 수 있어야 한다 ")
    public void shouldSaveCustomer() {

        BillingAddress billingAddress = BillingAddress.builder()
                .zipCode("18488")
                .build();
        Customer customer = Customer.builder().name("양재원").build();
        customer.addBillingAddress(billingAddress);

        Long fakeCustomerId = 1L;
        ReflectionTestUtils.setField(customer, "id", fakeCustomerId);

        // ⭐️ given
        given(repository.save(any())).willReturn(customer);
        given(repository.findOne(fakeCustomerId)).willReturn(Optional.of(customer));

        // ⭐️ when
        Long newCustomerId = service.saveCustomer(customer).orElseThrow().getId();

        // ⭐️ then
        Customer findCustomer = repository.findOne(newCustomerId).orElseThrow();
        assertThat(customer.getId()).isEqualTo(findCustomer.getId());
        assertThat(customer.getName()).isEqualTo(findCustomer.getName());
    }

}
