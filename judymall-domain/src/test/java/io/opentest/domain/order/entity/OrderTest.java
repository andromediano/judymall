/*
 * Copyright 2019. OPENTEST. All rights reserved.
 */

package io.opentest.domain.order.entity;

import static org.assertj.core.api.Assertions.*;

import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;
import io.opentest.domain.customer.entity.Customer;
import io.opentest.domain.product.entity.Product;
import io.opentest.domain.product.entity.QProduct;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ActiveProfiles;

import javax.persistence.EntityManager;

@ActiveProfiles({"development"})
@DataJpaTest(properties = {"spring.config.location=classpath:/application-domain.yml"})
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
public class OrderTest {

    @Autowired
    private EntityManager em;

    private JPAQueryFactory queryFactory;

    @BeforeEach
    public void init() {
        queryFactory = new JPAQueryFactory(em);
    }

    @Test
    @Rollback(value = false)
    @DisplayName("주문을 성공해야 한다")
    public void shouldSuccessOrder() {

        /*
        //OrderPayment orderPayment = CreditCardPayment.builder().amount(2000L).cardNumber("111222333").build();
        OrderPayment orderPayment = MobilePhonePayment.builder().amount(2000L).phoneNumber("111222333").build();
        System.out.println("@@@");
        System.out.println(orderPayment.isCreditCard());
        System.out.println("@@@");
        */

        // ⭐️ given
        Order order = new Order();
        order.setCustomer(em.find(Customer.class, 407L));
        /*
        Order order = Order.builder()
                .shippingAddress(ShippingAddress.builder().zipCode("12345").recipient("박철문").build())
                .build();
        */
        order.changeShippingAddress(ShippingAddress.builder().zipCode("12345").recipient("박철문").build());

        order.addOrderDetail(OrderDetail.builder().productId("P-0001").name("상품 A").price(1000L).quantity(2).build());
        order.addOrderDetail(OrderDetail.builder().productId("P-0002").name("상품 B").price(2000L).quantity(1).build());

        //order.addOrderPayment(new CreditCardPayment(2000L, "1234-123"));
        //order.addOrderPayment(new MobilePhonePayment(2000L, "010-0000-0000"));
        //order.setShippingAddress(new ShippingAddress("12345", "박철문"));

        order.addOrderPayment(CreditCardPayment.builder().amount(2000L).cardNumber("abc-def-3334").build());
        order.addOrderPayment(MobilePhonePayment.builder().amount(2000L).phoneNumber("010-0000-0000").build());
        //order.setShippingAddress(ShippingAddress.builder().zipCode("12345").recipient("박철문").build());

        // ⭐️ when
        em.persist(order);

        BooleanBuilder builder = new BooleanBuilder();
        builder.and(QOrder.order.id.eq(order.getId()));
        Order savedOrder = queryFactory.selectFrom(QOrder.order)
                .where(builder)
                .fetchOne();

        // ⭐️ then
        assertThat(savedOrder).isNotNull();
        assertThat(savedOrder).isEqualTo(order);
    }

}
