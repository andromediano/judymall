/*
 * Copyright 2019. OPENTEST. All rights reserved.
 */

package io.opentest.domain.product.entity;

import static org.assertj.core.api.Assertions.*;

import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.ActiveProfiles;

import java.util.List;
import javax.persistence.EntityManager;

@ActiveProfiles({"development"})
@DataJpaTest(properties = {"spring.config.location=classpath:/application-domain.yml"})
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
public class ProductTest {

    @Autowired
    private EntityManager em;

    private JPAQueryFactory queryFactory;

    @BeforeEach
    public void init() {
        queryFactory = new JPAQueryFactory(em);
    }

    @Test
    @DisplayName("상품을 생성햐야 한다")
    public void shouldCreateProduct() {

        // ⭐️ given
        Product product = Product.builder()
                .name("뜨거운 냉장고-3")
                .build();

        // ⭐️ when
        em.persist(product);

        BooleanBuilder builder = new BooleanBuilder();
        builder.and(QProduct.product.id.eq(product.getId()));

        Product savedProduct = queryFactory.selectFrom(QProduct.product)
                .where(builder)
                .fetchOne();

        // ⭐️ then
        assertThat(savedProduct).isNotNull();
        assertThat(savedProduct).isEqualTo(product);
    }

    @Test
    @DisplayName("상품이름을 수정해야 한다")
    public void shouldUpdateProductName() {
        Product product = em.find(Product.class, 417L);
        product.name = "고장난 냉장고";
    }

    @Test
    public void findAll() {

        QProduct product = QProduct.product;
        BooleanBuilder builder = new BooleanBuilder();

        List<Product> products = queryFactory.selectFrom(product)
                .where(builder)
                //.groupBy()
                //.orderBy()
                //.offset(0)
                //.limit(10)
                .fetch();
    }
}