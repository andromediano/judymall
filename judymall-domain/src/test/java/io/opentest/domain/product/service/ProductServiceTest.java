/*
 * Copyright 2019. OPENTEST. All rights reserved.
 */

package io.opentest.domain.product.service;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.BDDMockito.*;

import io.opentest.domain.product.entity.Product;
import io.opentest.domain.product.repository.ProductRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * FIRST.
 */
@ExtendWith(MockitoExtension.class)
public class ProductServiceTest {

    // 테스트 하고자 하는 객체
    @InjectMocks
    private ProductService service;

    // 테스트 하고자 하는 객체에서 주입하고 있는 객체
    @Mock
    private ProductRepository repository;

    private final List<Product> products = new ArrayList<>();

    /**
     * 초기화.
     */
    @BeforeEach
    public void init() {
        products.add(Product.builder().name("상품1").build());
        products.add(Product.builder().name("상품2").build());
        products.add(Product.builder().name("상품3").build());
        products.add(Product.builder().name("상품4").build());
    }

    @Test
    @DisplayName("상품을 저장한다")
    public void shouldCreateProduct() {

        Product product = Product.builder().name("시원한 호박죽").build();

        Long fakeProductId = 1L;
        ReflectionTestUtils.setField(product, "id", fakeProductId);

        // ⭐️ given
        given(repository.save(any())).willReturn(product);
        given(repository.findOne(fakeProductId)).willReturn(Optional.of(product));

        // ⭐️ when
        Long newProductId = service.saveProduct(product).orElseThrow().getId();

        // ⭐️ then
        Product findProduct = repository.findOne(newProductId).orElseThrow();
        assertThat(product.getId()).isEqualTo(findProduct.getId());
        assertThat(product.getName()).isEqualTo(findProduct.getName());
    }

    @Test
    @DisplayName("상품목록을 조회함")
    public void findAll() {

        // ⭐️ given
        given(repository.findAll()).willReturn(products);

        // ⭐️ when
        List<Product> findProducts = service.findAll();

        // ⭐️ then
        assertThat(findProducts.size()).isEqualTo(products.size());
    }

    @Test
    @DisplayName("Repository로 상품목록을 조회함")
    public void findAllAsRepository() {

        // ⭐️ given
        given(repository.findAll()).willReturn(products);

        // ⭐️ when
        List<Product> findProducts = repository.findAll();

        // ⭐️ then
        assertThat(findProducts.size()).isEqualTo(products.size());
        assertThat(findProducts.get(0).getName()).isEqualTo("상품1");
        assertThat(findProducts.get(1).getName()).isEqualTo("상품2");
        assertThat(findProducts.get(2).getName()).isEqualTo("상품3");
    }
}
